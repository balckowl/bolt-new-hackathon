// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator zod {
  provider = "zod-prisma-types"
  output   = "prisma/zod"
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  /// @zod.string.min(2, { message: "OS 名は2文字以上で入力してください。" }).max(10, { message: "OS 名は10文字以下で入力してください。" })
  osName  String?  @unique
  desktop Desktop?

  @@unique([email])
  @@map("user")
}

enum BackgroundOption {
  DEFAULT
  WARM
  GREEN
  BLACK
  SUNSET
  STATION
  OCEAN
  SAKURA
  MOUNTAIN
}

model Desktop {
  id         String           @id @default(uuid())
  userId     String           @unique
  user       User             @relation(fields: [userId], references: [id])
  state      Json
  isPublic   Boolean          @default(false)
  background BackgroundOption @default(SUNSET)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@map("desktop")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
